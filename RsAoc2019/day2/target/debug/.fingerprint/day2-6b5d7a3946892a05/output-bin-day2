{"$message_type":"diagnostic","message":"unnecessary parentheses around `for` iterator expression","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1002,"byte_end":1003,"line_start":28,"line_end":28,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    for noun in (0..=99){","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1009,"byte_end":1010,"line_start":28,"line_end":28,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    for noun in (0..=99){","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1002,"byte_end":1003,"line_start":28,"line_end":28,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    for noun in (0..=99){","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":1009,"byte_end":1010,"line_start":28,"line_end":28,"column_start":24,"column_end":25,"is_primary":true,"text":[{"text":"    for noun in (0..=99){","highlight_start":24,"highlight_end":25}],"label":null,"suggested_replacement":" ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `for` iterator expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:28:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for noun in (0..=99){\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    for noun in \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0m0..=99\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    for noun in 0..=99\u001b[0m\u001b[0m\u001b[38;5;10m \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unnecessary parentheses around `for` iterator expression","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1032,"byte_end":1033,"line_start":29,"line_end":29,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"        for verb in (0..=99)","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":1039,"byte_end":1040,"line_start":29,"line_end":29,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"        for verb in (0..=99)","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1032,"byte_end":1033,"line_start":29,"line_end":29,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"        for verb in (0..=99)","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":1039,"byte_end":1040,"line_start":29,"line_end":29,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"        for verb in (0..=99)","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `for` iterator expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for verb in (0..=99)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        for verb in \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0m0..=99\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        for verb in 0..=99\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"importing legacy numeric constants","code":{"code":"clippy::legacy_numeric_constants","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":35,"byte_end":40,"line_start":1,"line_end":1,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"use std::{env, fs::read_to_string, usize};","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this import","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"then `usize::<CONST>` will resolve to the respective associated constant","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::legacy_numeric_constants)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: importing legacy numeric constants\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:36\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{env, fs::read_to_string, usize};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove this import\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: then `usize::<CONST>` will resolve to the respective associated constant\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::legacy_numeric_constants)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"writing `&Vec` instead of `&[_]` involves a new object where a slice will do","code":{"code":"clippy::ptr_arg","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":61,"byte_end":70,"line_start":3,"line_end":3,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"fn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>","highlight_start":18,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::ptr_arg)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change this to","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":61,"byte_end":70,"line_start":3,"line_end":3,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"fn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>","highlight_start":18,"highlight_end":27}],"label":null,"suggested_replacement":"&[i32]","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: writing `&Vec` instead of `&[_]` involves a new object where a slice will do\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:18\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: change this to: `&[i32]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::ptr_arg)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"casting to the same type is unnecessary (`usize` -> `usize`)","code":{"code":"clippy::unnecessary_cast","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1109,"byte_end":1133,"line_start":31,"line_end":31,"column_start":63,"column_end":87,"is_primary":true,"text":[{"text":"            if runCode(code, noun, verb)[0] == target {return (100*noun+verb) as usize}","highlight_start":63,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::unnecessary_cast)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1109,"byte_end":1133,"line_start":31,"line_end":31,"column_start":63,"column_end":87,"is_primary":true,"text":[{"text":"            if runCode(code, noun, verb)[0] == target {return (100*noun+verb) as usize}","highlight_start":63,"highlight_end":87}],"label":null,"suggested_replacement":"(100*noun+verb)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting to the same type is unnecessary (`usize` -> `usize`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:31:63\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if runCode(code, noun, verb)[0] == target {return (100*noun+verb) as usize}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `(100*noun+verb)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::unnecessary_cast)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `runCode` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":47,"byte_end":54,"line_start":3,"line_end":3,"column_start":4,"column_end":11,"is_primary":true,"text":[{"text":"fn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>","highlight_start":4,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":47,"byte_end":54,"line_start":3,"line_end":3,"column_start":4,"column_end":11,"is_primary":true,"text":[{"text":"fn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>","highlight_start":4,"highlight_end":11}],"label":null,"suggested_replacement":"run_code","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `runCode` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:4\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn runCode(code: &Vec<i32>, noun: usize, verb: usize) -> Vec<usize>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `run_code`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `newCode` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":126,"byte_end":133,"line_start":5,"line_end":5,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    let mut newCode : Vec<usize> = code.iter().map(|&n| n as usize).collect() ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":126,"byte_end":133,"line_start":5,"line_end":5,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    let mut newCode : Vec<usize> = code.iter().map(|&n| n as usize).collect() ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"new_code","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `newCode` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut newCode : Vec<usize> = code.iter().map(|&n| n as usize).collect() ;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `new_code`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `inputPos1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":334,"byte_end":343,"line_start":11,"line_end":11,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":334,"byte_end":343,"line_start":11,"line_end":11,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":"input_pos1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `inputPos1` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `input_pos1`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `inputPos2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":345,"byte_end":354,"line_start":11,"line_end":11,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":345,"byte_end":354,"line_start":11,"line_end":11,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":"input_pos2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `inputPos2` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `input_pos2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `outputPos` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":356,"byte_end":365,"line_start":11,"line_end":11,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":356,"byte_end":365,"line_start":11,"line_end":11,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":"output_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `outputPos` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        1 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `output_pos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `inputPos1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":554,"byte_end":563,"line_start":13,"line_end":13,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":554,"byte_end":563,"line_start":13,"line_end":13,"column_start":20,"column_end":29,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":20,"highlight_end":29}],"label":null,"suggested_replacement":"input_pos1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `inputPos1` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `input_pos1`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `inputPos2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":565,"byte_end":574,"line_start":13,"line_end":13,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":565,"byte_end":574,"line_start":13,"line_end":13,"column_start":31,"column_end":40,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":31,"highlight_end":40}],"label":null,"suggested_replacement":"input_pos2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `inputPos2` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `input_pos2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `outputPos` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":576,"byte_end":585,"line_start":13,"line_end":13,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":576,"byte_end":585,"line_start":13,"line_end":13,"column_start":42,"column_end":51,"is_primary":true,"text":[{"text":"        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);","highlight_start":42,"highlight_end":51}],"label":null,"suggested_replacement":"output_pos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `outputPos` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:13:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        2 => {let (inputPos1, inputPos2, outputPos) = (newCode[idx+1], newCode[idx+2], newCode[idx+3]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `output_pos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"function `parseFile` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":1181,"byte_end":1190,"line_start":38,"line_end":38,"column_start":4,"column_end":13,"is_primary":true,"text":[{"text":"fn parseFile(filename: &str) -> Vec<i32>","highlight_start":4,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":1181,"byte_end":1190,"line_start":38,"line_end":38,"column_start":4,"column_end":13,"is_primary":true,"text":[{"text":"fn parseFile(filename: &str) -> Vec<i32>","highlight_start":4,"highlight_end":13}],"label":null,"suggested_replacement":"parse_file","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `parseFile` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:38:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parseFile(filename: &str) -> Vec<i32>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `parse_file`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"14 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 14 warnings emitted\u001b[0m\n\n"}
